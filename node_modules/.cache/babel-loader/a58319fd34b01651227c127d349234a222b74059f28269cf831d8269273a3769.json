{"ast":null,"code":"import { frame } from 'motion-dom';\nimport { makeUseVisualState } from '../../motion/utils/use-visual-state.mjs';\nimport { transformProps } from '../html/utils/keys-transform.mjs';\nimport { buildSVGAttrs } from './utils/build-attrs.mjs';\nimport { createSvgRenderState } from './utils/create-render-state.mjs';\nimport { isSVGTag } from './utils/is-svg-tag.mjs';\nimport { updateSVGDimensions } from './utils/measure.mjs';\nimport { renderSVG } from './utils/render.mjs';\nimport { scrapeMotionValuesFromProps } from './utils/scrape-motion-values.mjs';\nconst layoutProps = [\"x\", \"y\", \"width\", \"height\", \"cx\", \"cy\", \"r\"];\nconst svgMotionConfig = {\n  useVisualState: makeUseVisualState({\n    scrapeMotionValuesFromProps: scrapeMotionValuesFromProps,\n    createRenderState: createSvgRenderState,\n    onUpdate: ({\n      props,\n      prevProps,\n      current,\n      renderState,\n      latestValues\n    }) => {\n      if (!current) return;\n      let hasTransform = !!props.drag;\n      if (!hasTransform) {\n        for (const key in latestValues) {\n          if (transformProps.has(key)) {\n            hasTransform = true;\n            break;\n          }\n        }\n      }\n      if (!hasTransform) return;\n      let needsMeasure = !prevProps;\n      if (prevProps) {\n        /**\n         * Check the layout props for changes, if any are found we need to\n         * measure the element again.\n         */\n        for (let i = 0; i < layoutProps.length; i++) {\n          const key = layoutProps[i];\n          if (props[key] !== prevProps[key]) {\n            needsMeasure = true;\n          }\n        }\n      }\n      if (!needsMeasure) return;\n      frame.read(() => {\n        updateSVGDimensions(current, renderState);\n        frame.render(() => {\n          buildSVGAttrs(renderState, latestValues, isSVGTag(current.tagName), props.transformTemplate);\n          renderSVG(current, renderState);\n        });\n      });\n    }\n  })\n};\nexport { svgMotionConfig };","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}